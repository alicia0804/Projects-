from cryptography.fernet import Fernet

# we make a simple password manager
# we can add new passwords (encrypted) and view them (decrypted)
# we use Fernet to handle the encryption / decryption

# we manage the key
def load_key():
    """we load the secret key from a file"""
    with open("key.key", "rb") as file:
        key = file.read()
    return key

# we use this once to generate the key file
# def write_key():
#     key = Fernet.generate_key()
#     with open("key.key", "wb") as key_file:
#         key_file.write(key)

# we load the existing key and create our Fernet object
key = load_key()
fer = Fernet(key)

# we ask for master password (right now we donâ€™t use it to encrypt/decrypt)
master_pwd = input("What is the master password? ")

# we view saved passwords
def view():
    """we read the password file and decrypt stored passwords"""
    with open('password.txt', 'r') as f:
        for line in f.readlines():
            data = line.rstrip()                        # we remove the newline
            user, encrypted_pass = data.split("|")      # we split username and password
            decrypted_pass = fer.decrypt(encrypted_pass.encode()).decode() # we decrypt password
            print("User:", user, "| Password:", decrypted_pass)

# we add new passwords
def add():
    """we add a new account and encrypted password to file"""
    name = input('Account name: ')
    pwd = input('Password: ')

    # we encrypt the password and turn it into string
    encrypted_pwd = fer.encrypt(pwd.encode()).decode()

    with open('password.txt', 'a') as f:
        # we write account name + encrypted password in the file
        f.write(name + "|" + encrypted_pwd + "\n")

# we make a loop to ask the user what they want to do
while True:
    mode = input("Would you like to add a new password or view existing ones (view, add)? Press q to quit: ").lower()

    if mode == "q":
        break

    if mode == "view":
        view()
    elif mode == "add":
        add()
    else: 
        print("Invalid mode")
